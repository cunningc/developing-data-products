Week 2 Lecture notes
Lecture 1
Creating reproducable presentations using R Markdown
- focusing on straight markdown
- note line 616 & 667 in the developing data products course notes rmd doc

Lecture 2 - creating an RMarkdown Presentation File

Lecture 3 - Title, author, setup info
create a New Slide using ##
## Slide Title
some content

***
a slide without a title

## My title
### A top level subheading
#### A second level subheading

## My title

 - Bullet 1
 - Bullet 2
 
1. Item 1
2. Item 2

Lecture 4 - formatting options
Plain text
*italicized text*  -note the astrix has to be next to the leading char
**Bold text**

Lecture 5 - inline R Code
- note that by default the knitr option echo=FALSE, you can set echo=TRUE for individual blocks or globally
- if you want just the code but not the output use eval=FALSE

```{r}
head(mtcars)
```
-- will produce a list of mtcars with comments chars ## on each line

```{r comment = ""}
head(mtcars)
```
-- you can make the comments anything you want

Lecture 6 - Figures and other things
## My new slide
- there are options for setting hight width, etc.

```{r, echo=FALSE,fig.aligh='center,fig.cap='My AWESOME figure'}
plot(mtcars$wt,mtcars$mpg,xlab="Weight",ylab="MPG")
```

Github publishing..
- github does some of the rmd rendering but doesn't execute r code in rmd files
- you can view the html - in github it shows actual html
- you need to have a gh-pages branch and put the html there where it can be viewed rendered at username.github.io/repo/...
- many people create a gh-pages branch and get rid of the master branch for purposes of easy publishing

assignment- create a figure, play around with options, publish to github repo and gh-pages

Sharing R Markdown Documents (10 min read cc'd here)
We recommend the following websites for sharing the HTML files that you produce from R Markdown documents. If you've taken The Data Scientist's Toolbox then you should be familiar with GitHub Pages. If you're familiar with Git and you haven't used it before their documentation for creating a site is very straightforward. If you're not familiar with Git and you're using RStudio you should take advantage of RPubs, which is perhaps the easiest way to share an HTML document from RStudio. You can find simple instructions for using RPubs here http://rpubs.com/about/getting-started. If you're looking for a site that will host any HTML file for free, including HTML files that are generated by R Markdown, you should check out NeoCities https://neocities.org/. You'll need to provide links to HTML files you've created with R Makrdown in upcoming peer assessments, so make sure to familiarize yourself with one of these sites.

Leaflet - interactive maps
-- see https://github.com/cunningc/Developing_Data_Products/blob/master/leaflet/leaflet.Rmd
Lecture 1 - creating interactive maps within R-studio
Leaflet is a popular javascript library 
install.packages("leaflet")
install.packages("magrittr")

```{r, echo=FALSE}
library(leaflet)
## this code..
my_map<-leaflet() %>%
  addTiles()
## is equivelant to this code..
my_map = leaflet() ## generates the map
my_map = addTiles(my_map) ## generates the content
my_map
```

Lecture 2 - your first map
leaflet is creating a layer (background), then you add tiles

Adding Markers addMarkers()
```{r,eval=FALSE}
my_map<-leaflet() # use piping
  addTiles() %>%
  addMarkers(lat=39.2980803, lng=-76.5898801,
              popus="Jeff Leek's Office")
my_map
```
## you need to get used to piping, especially when chaining as with dplyr
- note that piping %>% passes to the right
- so df %>% leaflet()  passes dataframe df into leaflet and so on

Lecture 3 - Adding Many Markers
- dump the markers you want to add in a dataframe
example 1
set.seed(2016-04-25)
df <- data.frame(lat = runif(20, min = 39.2, max = 39.3),
                 lng = runif(20, min = -76.6, max = -76.5))
df %>% 
  leaflet() %>%
  addTiles() %>%
  addMarkers()

example2
set.seed(2016-04-25)
df <- data.frame(lat = runif(20, min = 39.2, max = 39.3),
                 lng = runif(20, min = -76.6, max = -76.5))
df %>% 
  leaflet() %>%
  addTiles() %>%
  addMarkers()

Lecture 4 - making custom markers
The blue markers that leaflet comes packaged with may not be enough depending on what you're mapping. Thankfully you can make your own markers from .png files.

hopkinsIcon <- makeIcon(
  iconUrl = "http://brand.jhu.edu/content/uploads/2014/06/university.shield.small_.blue_.png",
  iconWidth = 31*215/230, iconHeight = 31,
  iconAnchorX = 31*215/230/2, iconAnchorY = 16
)

hopkinsLatLong <- data.frame(
  lat = c(39.2973166, 39.3288851, 39.2906617),
  lng = c(-76.5929798, -76.6206598, -76.5469683))

hopkinsLatLong %>% 
  leaflet() %>%
  addTiles() %>%
  addMarkers(icon = hopkinsIcon)
  
Adding Multiple Popups (links)
When adding multiple markers to a map, you may want to add popups for each marker. You can specify a string of plain text for each popup, or you can provide HTML which will be rendered inside of each popup.

hopkinsSites <- c(
  "<a href='http://www.jhsph.edu/'>East Baltimore Campus</a>",
  "<a href='https://apply.jhu.edu/visit/homewood/'>Homewood Campus</a>",
  "<a href='http://www.hopkinsmedicine.org/johns_hopkins_bayview/'>Bayview Medical Center</a>",
  "<a href='http://www.peabody.jhu.edu/'>Peabody Institute</a>",
  "<a href='http://carey.jhu.edu/'>Carey Business School</a>"
)

hopkinsLatLong %>% 
  leaflet() %>%
  addTiles() %>%
  addMarkers(icon = hopkinsIcon, popup = hopkinsSites)

Lecture 5 - Mapping Interactive Clusters
Sometimes you might have so many points on a map that it doesn't make sense to plot every marker. In these situations leaflet allows you to plot clusters of markers using addMarkers(clusterOptions = markerClusterOptions()). When you zoom in to each cluster, the clusters will separate until you can see the individual markers.

df <- data.frame(lat = runif(500, min = 39.25, max = 39.35),
                 lng = runif(500, min = -76.65, max = -76.55))
df %>% 
  leaflet() %>%
  addTiles() %>%
  addMarkers(clusterOptions = markerClusterOptions())
Mapping Clusters

df <- data.frame(lat = runif(500, min = 39.25, max = 39.35),
                 lng = runif(500, min = -76.65, max = -76.55))
df %>% 
  leaflet() %>%
  addTiles() %>%
  addMarkers(clusterOptions = markerClusterOptions())
  
Mapping Circle Markers
Instead of adding markers or clusters you can easily add circle markers using addCircleMarkers().

df <- data.frame(lat = runif(20, min = 39.25, max = 39.35),
                 lng = runif(20, min = -76.65, max = -76.55))
df %>% 
  leaflet() %>%
  addTiles() %>%
  addCircleMarkers()
  
Mapping Circle Markers (example 2)
df <- data.frame(lat = runif(20, min = 39.25, max = 39.35),
                 lng = runif(20, min = -76.65, max = -76.55))
df %>% 
  leaflet() %>%
  addTiles() %>%
  addCircleMarkers()

Lecture 6 - Drawing Circles, rectangles, Adding Legends
Drawing Circles
You can draw arbitrary shapes on the maps you create, including circles and squares. The code below draws a map where the circle on each city is proportional to the population of that city.

md_cities <- data.frame(name = c("Baltimore", "Frederick", "Rockville", "Gaithersburg", 
                                 "Bowie", "Hagerstown", "Annapolis", "College Park", "Salisbury", "Laurel"),
                        pop = c(619493, 66169, 62334, 61045, 55232,
                                39890, 38880, 30587, 30484, 25346),
                        lat = c(39.2920592, 39.4143921, 39.0840, 39.1434, 39.0068, 39.6418, 38.9784, 38.9897, 38.3607, 39.0993),
                        lng = c(-76.6077852, -77.4204875, -77.1528, -77.2014, -76.7791, -77.7200, -76.4922, -76.9378, -75.5994, -76.8483))
md_cities %>%
  leaflet() %>%
  addTiles() %>%
  addCircles(weight = 1, radius = sqrt(md_cities$pop) * 30)

Drawing Circles (example 2)
md_cities <- data.frame(name = c("Baltimore", "Frederick", "Rockville", "Gaithersburg", 
                                 "Bowie", "Hagerstown", "Annapolis", "College Park", "Salisbury", "Laurel"),
                        pop = c(619493, 66169, 62334, 61045, 55232,
                                39890, 38880, 30587, 30484, 25346),
                        lat = c(39.2920592, 39.4143921, 39.0840, 39.1434, 39.0068, 39.6418, 38.9784, 38.9897, 38.3607, 39.0993),
                        lng = c(-76.6077852, -77.4204875, -77.1528, -77.2014, -76.7791, -77.7200, -76.4922, -76.9378, -75.5994, -76.8483))
md_cities %>%
  leaflet() %>%
  addTiles() %>%
  addCircles(weight = 1, radius = sqrt(md_cities$pop) * 30) ## make size of circle based on population
Drawing Rectangles

You can add rectangles on leaflet maps as well:
leaflet() %>%
  addTiles() %>%
  addRectangles(lat1 = 37.3858, lng1 = -122.0595, 
                lat2 = 37.3890, lng2 = -122.0625)

Drawing Rectangles (example 2)
leaflet() %>%
  addTiles() %>%
  addRectangles(lat1 = 37.3858, lng1 = -122.0595, 
                lat2 = 37.3890, lng2 = -122.0625)

Adding Legends
Adding a legend can be useful if you have markers on your map with different colors:

df <- data.frame(lat = runif(20, min = 39.25, max = 39.35),
                 lng = runif(20, min = -76.65, max = -76.55),
                 col = sample(c("red", "blue", "green"), 20, replace = TRUE),
                 stringsAsFactors = FALSE)

df %>%
  leaflet() %>%
  addTiles() %>%
  addCircleMarkers(color = df$col) %>%
  addLegend(labels = LETTERS[1:3], colors = c("blue", "red", "green"))
  ## LETTERS[1:3] is simply setting labels to arbitrary letters as an example

Adding Legends (example 2)
df <- data.frame(lat = runif(20, min = 39.25, max = 39.35),
                 lng = runif(20, min = -76.65, max = -76.55),
                 col = sample(c("red", "blue", "green"), 20, replace = TRUE),
                 stringsAsFactors = FALSE)

df %>%
  leaflet() %>%
  addTiles() %>%
  addCircleMarkers(color = df$col) %>%
  addLegend(labels = LETTERS[1:3], colors = c("blue", "red", "green"))
  
