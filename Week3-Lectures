Week 3 Lectures
================
Lecture 1 - 2
--- R Packages Part 1 & 2 ----
---------------------
WHAT IS AN R PACKAGE?

A mechanism for extending the basic functionality of R
A collection of R functions, or other (data) objects
Organized in a systematic fashion to provide a minimal amount of consistency
Written by users/developers everywhere
Where are These R Packages?

Primarily available from CRAN and Bioconductor
Also available from GitHub, Bitbucket, Gitorious, etc. (and elsewhere)
Packages from CRAN/Bioconductor can be installed with install.packages()
Packages from GitHub can be installed using install_github() from the devtools package

You do not have to put a package on a central repository, but doing so makes it easier for others to install your package.

WHAT'S THE POINT?
"Why not just make some code available?"
Documentation / vignettes
Centralized resources like CRAN
Minimal standards for reliability and robustness
Maintainability / extension
Interface definition / clear API
Users know that it will at least load properly

---------------------------------
PACKAGE DEVELOPMENT PROCESS
Write some code in an R script file (.R)
Want to make code available to others
Incorporate R script file into R package structure
Write documentation for user functions
Include some other material (examples, demos, datasets, tutorials)
Package it up!
Submit package to CRAN or Bioconductor
Push source code repository to GitHub or other source code sharing web site

People find all kinds of problems with your code
Scenario #1: They tell you about those problems and expect you to fix it
Scenario #2: They fix the problem for you and show you the changes
You incorporate the changes and release a new version

------------------------------
PACKAGE ESSENTIALS
- Started by creating a directory with the name of the R package
- A DESCRIPTION file which has info about the package
- R code! (in the R/ sub-directory)
- Documentation (in the man/ sub-directory)
- NAMESPACE

FOR DETAILS-- 
SEE https://github.com/cunningc/Developing_Data_Products/blob/master/RPackages/rpackages.Rmd

NOTE: An explicit Software License is required for an R package to pass R CMD check without any warnings or errors
----------------------
GETTING STARTED
The package.skeleton() function in the utils package creates:
- a "skeleton" R package
- Directory structure (R/, man/), 
- DESCRIPTION file, 
- NAMESPACE file, 
- documentation files

If there are functions visible in your workspace, it writes R code files to the R/ directory
Documentation stubs are created in man/
You need to fill in the rest!

----------------------
SUMMARY
R packages provide a systematic way to make R code available to others
Standards ensure that packages have a minimal amount of documentation and robustness
Obtained from CRAN, Bioconductor, Github, etc.

Create a new directory with R/ and man/ sub-directories (or just use package.skeleton())
Write a DESCRIPTION file
Copy R code into the R/ sub-directory
Write documentation files in man/ sub-directory
Write a NAMESPACE file with exports/imports
Build and check
===========================================

Lecture 3
----- Building R Package Demo ------


==========================================
Lecture 4-5
----- R Classes and Methods Parts 1 & 2 -------
FOR DETAILS SEE
https://github.com/cunningc/Developing_Data_Products/blob/master/Classes_and_Methods/Classes_and_Methods.Rmd

CLASSES AND METHODS --
- A system for doing object oriented programming
- R was originally quite interesting because it is both interactive and has a system for object orientation.
- Other languages which support OOP (C++, Java, Lisp, Python, Perl) generally speaking are not interactive languages

In R much of the code for supporting classes/methods is written by John Chambers himself (the creator of the original S language) and documented in the book "Programming with Data: A Guide to the S Language".
A natural extension of Chambers' idea of allowing someone to cross the user -> programmer spectrum
Object oriented programming is a bit different in R than it is in most languages - even if you are familiar with the idea, you may want to pay attention to the details

TWO STYLES OF CLASSES AND METHODS --
---- S3 classes/methods
- Included with version 3 of the S language.
- Informal, a little kludgey
- Sometimes called old-style classes/methods

---- S4 classes/methods
- more formal and rigorous
- Included with S-PLUS 6 and R 1.4.0 (December 2001)
- Also called new-style classes/methods

TWO WORLDS LIVING SIDE BY SIDE
- For now (and the forseeable future), S3 classes/methods and S4 classes/methods are separate systems (but they can be mixed to some degree).
- Each system can be used fairly independently of the other.
- Developers of new projects (you!) are encouraged to use the S4 style classes/methods.
  - Used extensively in the Bioconductor project
- But many developers still use S3 classes/methods because they are "quick and dirty" (and easier).
- In this lecture we will focus primarily on S4 classes/methods
- The code for implementing S4 classes/methods in R is in the methods package, which is usually loaded by default (but you can load it with library(methods) if for some reason it is not loaded)

OBJECT ORIENTED PROGRAMMING IN R
- A class is a description of a thing. A class can be defined using setClass() in the methods package.
- An object is an instance of a class. Objects can be created using new().
- A method is a function that only operates on a certain class of objects.
- A generic function is an R function which dispatches methods. A generic function typically encapsulates a "generic" concept (e.g. plot, mean, predict, ...)
  - The generic function does not actually do any computation.
- A method is the implementation of a generic function for an object of a particular class.

THINGS TO LOOK UP
The help files for the 'methods' package are extensive - do read them as they are the primary documentation
You may want to start with ?Classes and ?Methods
Check out ?setClass, ?setMethod, and ?setGeneric
Some of it gets technical, but try your best for now-it will make sense in the future as you keep using it.
Most of the documentation in the methods package is oriented towards developers/programmers as these are the primary people using classes/methods

CLASSES
FOR DETAILS 
SEE https://github.com/cunningc/Developing_Data_Products/blob/master/Classes_and_Methods/Classes_and_Methods.Rmd

GENERICS/METHODS IN R
S4 and S3 style generic functions look different but conceptually, they are the same (they play the same role).
When you program you can write new methods for an existing generic OR create your own generics and associated methods.
Of course, if a data type does not exist in R that matches your needs, you can always define a new class along with generics/methods that go with it.

S3 AND S4 METHODS
- examples

-- Generic/method mechanism --
The first argument of a generic function is an object of a particular class (there may be other arguments)
- The generic function checks the class of the object.
- A search is done to see if there is an appropriate method for that class.
- If there exists a method for that class, then that method is called on the object and we're done.
- If a method for that class does not exist, a search is done to see if there is a default method for the generic. If a default exists, then the default method is called.
- If a default method doesn't exist, then an error is thrown.

-- Examining Code for Methods --
- You cannot just print the code for a method like other functions because the code for the method is usually hidden.
- If you want to see the code for an S3 method, you can use the function getS3method.
- The call is getS3method(<generic>, <class>)
- For S4 methods you can use the function getMethod
- The call is getMethod(<generic>, <signature>) (more details later)

Further examples
see the rmd reference doc

SUMMARY
- Developing classes and associated methods is a powerful way to extend the functionality of R
- Classes define new data types
- Methods extend generic functions to specify the behavior of generic functions on new classes
- As new data types and concepts are created, classes/methods provide a way for you to develop an intuitive interface to those data/concepts for users

WHERE TO LOOK, PLACES TO START
- The best way to learn this stuff is to look at examples
- There are quite a few examples on CRAN which use S4 classes/methods. You can usually tell if they use S4 classes/methods if the methods package is listed in the Depends: field
- Bioconductor (http://www.bioconductor.org) - a rich resource, even if you know nothing about bioinformatics
- Some packages on CRAN (as far as I know) - SparseM, gpclib, flexmix, its, lme4, orientlib, filehash
- The stats4 package (comes with R) has a bunch of classes/methods for doing maximum likelihood analysis.

